/**********************************************************************************/
/* Ext_SDRAM.ini: External SDRAM Initialization File (Micron MT47H64M16HR-25)     */
/**********************************************************************************/
/* This file is part of the uVision/ARM development tools.                        */
/* Copyright (c) 2013 Keil Software. All rights reserved.                         */
/* This software may only be used under the terms of a valid, current,            */
/* end user licence from KEIL for a compatible version of KEIL software           */
/* development tools. Nothing else gives you the right to use this software.      */
/**********************************************************************************/

/**********************************************************************************/
DEFINE LONG MCM_BASE;
DEFINE LONG SIM_SCGC5;
DEFINE LONG SIM_CLKDIV1;
DEFINE LONG MCG_BASE;
DEFINE LONG DDR_BASE;
DEFINE LONG SIM_SCGC3;
DEFINE LONG SIM_MCR;

MCG_BASE    = 0x40064000;
DDR_BASE    = 0x400AE000;
MCM_BASE    = 0xE0080000;
SIM_SCGC5   = 0x40048038;
SIM_CLKDIV1 = 0x40048044;
SIM_SCGC3   = 0x40048030;
SIM_MCR     = 0x4004806C;

// PLL Initialization
// PLL0(120MHz), Core clock = 120MHz, BusClock = 60MHz
// PLL1(150MHz), MCGDDRCLK = 150MHz

FUNC void init_pll (void) {
  // Initialize SIM dividers
  _WDWORD(SIM_SCGC5, 0x00047F82);
  _WDWORD(SIM_CLKDIV1, 0x01250000);
  
  
  // Initialize PLL0 (120MHz)
  _WBYTE( MCG_BASE+0x001, 0x10);
  _WBYTE( MCG_BASE+0x000, 0xA8);
  _WBYTE( MCG_BASE+0x004, 0x04);
  _WBYTE( MCG_BASE+0x005, 0x68);
  _WBYTE( MCG_BASE+0x004, 0x44);
  _WBYTE( MCG_BASE+0x000, 0x28);
  
  // Initialize PLL1 (150MHz)
  // PRDIV(5), VDIV(30)
  _WBYTE( MCG_BASE+0x00F, 0x14 );
  _WBYTE( MCG_BASE+0x011, 0x0E );
  _WBYTE( MCG_BASE+0x010, 0x44 );
  
  //Delay to allow the PLL time to lock 
  _sleep_ (100);                          // Wait 100   ms
}

FUNC void init_ddr (void) {

  //Enable DDR controller clock 
  _WDWORD( SIM_SCGC3, _RDWORD(SIM_SCGC3) | 0x00004000 );
  
  //Enable DDR pads and set slew rate 
  _WDWORD( SIM_MCR, _RDWORD(SIM_MCR) | 0x0C4 );
  
  // I/O Pad Control (PAD_CTRL) register.
  _WDWORD( DDR_BASE+0x1AC, 0x01030203 );
  
  // DDR controller Initialization
  
  _WDWORD( DDR_BASE+0x000, 0x00000400 ); //CR00
  _WDWORD( DDR_BASE+0x004, 0x01000000 ); //CR01
  _WDWORD( DDR_BASE+0x008, 0x02000031 ); //CR02
  _WDWORD( DDR_BASE+0x00C, 0x02020506 ); //CR03
  _WDWORD( DDR_BASE+0x010, 0x06090202 ); //CR04
  _WDWORD( DDR_BASE+0x014, 0x02020302 ); //CR05
  _WDWORD( DDR_BASE+0x018, 0x02904002 ); //CR06
  _WDWORD( DDR_BASE+0x01C, 0x01000303 ); //CR07
  _WDWORD( DDR_BASE+0x020, 0x05030201 ); //CR08
  _WDWORD( DDR_BASE+0x024, 0x020000c8 ); //CR09
  _WDWORD( DDR_BASE+0x028, 0x03003207 ); //CR10
  _WDWORD( DDR_BASE+0x02C, 0x01000000 ); //CR11
  _WDWORD( DDR_BASE+0x030, 0x04920031 ); //CR12
  _WDWORD( DDR_BASE+0x034, 0x00000005 ); //CR13
  _WDWORD( DDR_BASE+0x038, 0x00C80002 ); //CR14
  _WDWORD( DDR_BASE+0x03C, 0x00000032 ); //CR15
  _WDWORD( DDR_BASE+0x040, 0x00000001 ); //CR16
  _WDWORD( DDR_BASE+0x050, 0x00030300 ); //CR20
  _WDWORD( DDR_BASE+0x054, 0x00040232 ); //CR21
  _WDWORD( DDR_BASE+0x058, 0x00000000 ); //CR22
  _WDWORD( DDR_BASE+0x05C, 0x00040302 ); //CR23
  _WDWORD( DDR_BASE+0x064, 0x0A010201 ); //CR25
  _WDWORD( DDR_BASE+0x068, 0x0101FFFF ); //CR26
  _WDWORD( DDR_BASE+0x06C, 0x01010101 ); //CR27
  _WDWORD( DDR_BASE+0x070, 0x00000003 ); //CR28
  _WDWORD( DDR_BASE+0x074, 0x00000000 ); //CR29
  _WDWORD( DDR_BASE+0x078, 0x00000001 ); //CR30
  _WDWORD( DDR_BASE+0x088, 0x02020101 ); //CR34
  _WDWORD( DDR_BASE+0x090, 0x01010201 ); //CR36
  _WDWORD( DDR_BASE+0x094, 0x00000200 ); //CR37
  _WDWORD( DDR_BASE+0x098, 0x00200000 ); //CR38
  _WDWORD( DDR_BASE+0x09C, 0x01010020 ); //CR39
  _WDWORD( DDR_BASE+0x0A0, 0x00002000);  //CR40
  _WDWORD( DDR_BASE+0x0A4, 0x01010020 ); //CR41
  _WDWORD( DDR_BASE+0x0A8, 0x00002000 ); //CR42
  _WDWORD( DDR_BASE+0x0AC, 0x01010020 ); //CR43
  _WDWORD( DDR_BASE+0x0B0, 0x00000000 ); //CR44
  _WDWORD( DDR_BASE+0x0B4, 0x03030303 ); //CR45
  _WDWORD( DDR_BASE+0x0B8, 0x02006401 ); //CR46
  _WDWORD( DDR_BASE+0x0BC, 0x01020202 ); //CR47
  _WDWORD( DDR_BASE+0x0C0, 0x01010064 ); //CR48
  _WDWORD( DDR_BASE+0x0C4, 0x00020101 ); //CR49
  _WDWORD( DDR_BASE+0x0C8, 0x00000064 ); //CR50
  _WDWORD( DDR_BASE+0x0D0, 0x02000602);  //CR52
  _WDWORD( DDR_BASE+0x0D4, 0x03c80000);  //CR53
  _WDWORD( DDR_BASE+0x0D8, 0x03c803c8);  //CR54
  _WDWORD( DDR_BASE+0x0DC, 0x03c803c8);  //CR55
  _WDWORD( DDR_BASE+0x0E0, 0x020303c8);  //CR56
  _WDWORD( DDR_BASE+0x0E4, 0x01010002);  //CR57
  
  //CR00 : Set Start Bit
  _WDWORD( DDR_BASE+0x000, _RDWORD(DDR_BASE+0x000) | 0x001 ); 
  
  // MCM_CR : Set the SDRAM size (128 MB)
  _WDWORD( MCM_BASE+0x00C, 0x00100000 );

}

FUNC void Setup (void) {
  SP = _RDWORD(0x80000000);          // Setup Stack Pointer
  PC = _RDWORD(0x80000004);          // Setup Program Counter
  _WDWORD(0xE000ED08, 0x80000000);   // Setup Vector Table Offset Register
}


FUNC void Download (void) {
  exec("LOAD Ext_SDRAM\\Blinky.axf INCREMENTAL");
}

init_pll();
init_ddr();
Download();
Setup();
g, main